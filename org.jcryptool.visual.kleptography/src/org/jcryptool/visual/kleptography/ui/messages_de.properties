KleptoView_Keygen=Schl\u00FCsselgenerierung und Verschl\u00FCsselung
KleptoView_FixedP=Angriff auf festem P
KleptoView_SETUP=SETUP-Angriff
OverwriteDialog_Already_Saved_Two=Sie haben schon zwei \u00F6ffentliche Schl\u00FCssel und Geheimtexte gespeichert.\nW\u00E4hlen Sie ein Paar zum \u00dcberschreiben oder brechen Sie ab.
OverwriteDialog_Cancel=Abbrechen
OverwriteDialog_First_Set=Erstes Paar
OverwriteDialog_Overwrite_Saved_Data=Gespeicherte Daten \u00FCberschreiben
OverwriteDialog_Second_Set=Zweites Paar
RSAAttackView_Fixed_Back=Zur\u00FCck zur Schl\u00FCsselerzeugung und Verschl\u00FCsselung
RSAAttackView_Fixed_Calc_Private=Private Schl\u00FCssel berechnen
RSAAttackView_Fixed_Calculations=Rechnungen
RSAAttackView_Fixed_Calculations_Desc=Diese Werte k\u00F6nnen leicht berechnet werden, wenn bekannt ist, dass die Module einen gemeinsamen Teiler haben. So kann auch ein Beobachter ohne Zusatzinformationen den privaten Schl\u00FCssel berechnen. Die Primzahl P wird gemeinsam bei beiden Schl\u00FCsseln benutzt, aber Q und D nicht.
RSAAttackView_Fixed_Ciphertext1=Erster Geheimtext
RSAAttackView_Fixed_Ciphertext2=Zweiter Geheimtext
RSAAttackView_Fixed_Ciphertexts=Geheimtext
RSAAttackView_Fixed_Ciphertexts_Desc=Geheimtexte werden \u00F6ffentlich \u00FCbermittelt und sind deswegen f\u00FCr einen Angreifer oder anderen Beobachter sichtbar.
RSAAttackView_Fixed_D1=D (privater Exponent) des ersten Schl\u00FCssels
RSAAttackView_Fixed_D2=D (privater Exponent) des zweiten Schl\u00FCssels
RSAAttackView_Fixed_Decrypt_Cipher=Geheimtexte entschl\u00FCsseln
RSAAttackView_Fixed_Decrypted=Entschl\u00FCsselte Texte
RSAAttackView_Fixed_Decrypted_Desc=Die Klartexte k\u00F6nnen von einem Angreifer r\u00FCckgewonnen werden, nachdem er die Geheimtexte mit dem nachgebildeten Schl\u00FCsseln entschl\u00FCsselt.
RSAAttackView_Fixed_Decrypted1=Erster entschl\u00FCsselter Text
RSAAttackView_Fixed_Decrypted2=Zweiter entschl\u00FCsselter Text
RSAAttackView_Fixed_E1=E (\u00F6ffentlicher Exponent) des ersten Schl\u00FCssels
RSAAttackView_Fixed_E2=E (\u00F6ffentlicher Exponent) des zweiten Schl\u00FCssels
RSAAttackView_Fixed_FactoredP=Faktorisierte Primzahl P
RSAAttackView_Fixed_Find_GCD=GgT der Module berechnen
RSAAttackView_Fixed_N1=N (Modul) des ersten Schl\u00FCssels
RSAAttackView_Fixed_N2=N (Modul) des zweiten Schl\u00FCssels
RSAAttackView_Fixed_Public_Desc=\u00d6ffentliche Schl\u00FCssel sind definitionsgem\u00E4\u00DF \u00F6ffentlich verf\u00FCgbar und deswegen f\u00FCr einen Angreifer bekannt. Diese Schl\u00FCssel wurden vom ersten Tab \u00FCbernommen. F\u00FCr einen Angriff ben\u00F6tigt der Angreifer zwei verschiedene Schl\u00FCssel mit entsprechenden Geheimtexten.
RSAAttackView_Fixed_Public_Keys=\u00d6ffentliche Schl\u00FCssel
RSAAttackView_Fixed_Q1=Q (Primzahl) des ersten Schl\u00FCssels
RSAAttackView_Fixed_Q2=Q (Primzahl) des zweiten Schl\u00FCssels
RSAAttackView_Fixed_Step9=Schritt 9: Der ggT der zwei gespeicherten Module wird berechnet. Da eine der Primzahlen w\u00E4hrend der Erzeugung der Schl\u00FCssel fest bleibt, wird dieser Wert als ggT wieder erscheinen.
RSAAttackView_Fixed_Step10=Schritt 10: Mithilfe der jetzt bekannten Primzahl P kann man die Werte der beiden Q-Primzahlen durch einfache Teilung von beiden N-Modulen durch P finden. Mit den beiden zu jedem N-Modul entsprechenden Primzahlpaaren kann man die privaten Exponenten D wie in dem Ger\u00E4t bilden.
RSAAttackView_Fixed_Step11=Schritt 11: Man kann jetzt die Geheimtexte mit den entsprechenden nachgebildeten privaten Exponenten entschl\u00FCsseln, ohne die privaten Schl\u00FCsseln direkt erhalten zu haben.
RSAAttackView_Fixed_Title=Ausnutzung eines festen P
RSAAttackView_Gen_Desc=Das Ziel eines Angreifers ist es, mit \u00F6ffentlich verf\u00FCgbaren Daten, d.h. \u00F6ffentliche Schl\u00FCssel und Geheimtexte, an Informationen zu gelangen, die zur Faktorisierung des Moduls N und Nachbildung des privaten Exponents D f\u00FChren.
RSAAttackView_Identical_N_Text=Die gespeicherten N-Module sind gleich und k\u00F6nnen deswegen nicht faktorisiert werden.\nBitte speichern Sie einen anderen \u00F6ffentlichen Schl\u00FCssel und Geheimtext.
RSAAttackView_Identical_N_Title=Identisches Modul N
RSAAttackView_SETUP_Additional_Data=Zus\u00E4tzliche Daten
RSAAttackView_SETUP_Additional_Desc=Das verschl\u00FCsselte P wird von den oberen Bits des \u00F6ffentlichen Moduls N gelesen und um sie zu entschl\u00FCsseln braucht der Angreifer seinen eigenen privaten Schl\u00FCssel.
RSAAttackView_SETUP_AttackersD=D des Angreifers (privater Exponent)
RSAAttackView_SETUP_Back=Zur\u00FCck zur Schl\u00FCsselerzeugung und Verschl\u00FCsselung
RSAAttackView_SETUP_Calc_Private=Private Schl\u00FCssel berechnen
RSAAttackView_SETUP_Calculations=Berechnungen
RSAAttackView_SETUP_Calculations_Desc=Der Angreifer wird die mit seinem \u00F6ffentlichen Schl\u00FCssel verschl\u00FCsselte Primzahl P in den oberen Bits des Moduls N finden. Wegen einer m\u00F6glichen Bit\u00FCbertragung in der Teilung im Primzahlerzeugungalgorithmus muss der Angreifer auch P' berechnen, indem er den Wert des verschl\u00FCsselten P plus eins entschl\u00FCsselt. Der Angreifer kann P nutzen, um Q und dann D zu berechnen, aber muss auch P' nutzen, um Q' und D' zu berechnen.
RSAAttackView_SETUP_Ciphertext_Desc=Der Geheimtext wird \u00F6ffentlich \u00FCbermittelt und ist folglich komplett sichtbar f\u00FCr einen Angreifer oder anderen Beobachter.
RSAAttackView_SETUP_Ciphertext_Group=Geheimtext
RSAAttackView_SETUP_D1=D (privater Exponent)
RSAAttackView_SETUP_D2=D' (privater Exponent)
RSAAttackView_SETUP_Decrypt_Cipher=Geheimtexte entschl\u00FCsseln
RSAAttackView_SETUP_Decrypted1=Mit D entschl\u00FCsselter Geheimtext
RSAAttackView_SETUP_Decrypted2=Mit D' entschl\u00FCsselter Geheimtext
RSAAttackView_SETUP_Decryption_Desc=Der Angreifer kann den Klartext durch Entschl\u00FCsselung mit einem nachgebildeten privaten Schl\u00FCssel erlangen. Aber er kann nicht wissen, ob D oder D' der richtige private Expontent ist und muss deswegen beide benutzen.
RSAAttackView_SETUP_Decryptions=Entschl\u00FCsselte Texte
RSAAttackView_SETUP_DecryptP=Verschl\u00FCsselte P entschl\u00FCsseln
RSAAttackView_SETUP_E=E (\u00F6ffentlicher Exponent)
RSAAttackView_SETUP_EncryptedP=Verschl\u00FCsselte P
RSAAttackView_SETUP_N=N (Modul)
RSAAttackView_SETUP_P1=Entschl\u00FCsselte P
RSAAttackView_SETUP_P2=Entschl\u00FCsselte P' (P + 1)
RSAAttackView_SETUP_Public_Desc=Der \u00F6ffentliche Schl\u00FCssel ist definitionsgem\u00E4\u00DF \u00F6ffentlich verf\u00FCgbar und folglich sichtbar f\u00FCr einen Angreifer. Dieser Schl\u00FCssel wurde direkt aus dem ersten Tab \u00FCbernommen.
RSAAttackView_SETUP_Public_Keys=\u00d6ffentlicher Schl\u00FCssel
RSAAttackView_SETUP_Q1=Q = N / entschl\u00FCsselte P
RSAAttackView_SETUP_Q2=Q' = N / entschl\u00FCsselte P'
RSAAttackView_SETUP_Step7=Schritt 7: Die verschl\u00FCsselte Primzahl P wird von den oberen Bits des Moduls N entnommen. Entschl\u00FCsselung dieses Wertes mit dem privaten Schl\u00FCssel des Angreifers ergibt die Primzahl P, es sei denn, ein \u00DCbertragungsbit wurde in der fr\u00FCheren Teilung genommen. Da der Angreifer nicht wissen kann, ob das passiert ist, muss er das verschl\u00FCsselte P und P plus eins (= P') entschl\u00FCsseln.
RSAAttackView_SETUP_Step8=Schritt 8: Mithilfe von P und P' sowie dem \u00F6ffentlichen Schl\u00FCssel kann der Angreifer die zweite Primzahl Q und danach den privaten Schl\u00FCssel nachbilden. Der Angreifer muss Q und Q' berechnen, obwohl nur eine Primzahl ergeben wird, die N ohne Rest teilt.
RSAAttackView_SETUP_Step9=Schritt 9: Es gibt jetzt zwei m\u00F6gliche Schl\u00FCssel, mit dem man den Geheimtext entschl\u00FCsseln kann. Der Angreifer k\u00F6nnte schon vorab pr\u00FCfen, welcher Wert der Richtige ist, aber einer wird immer die urspr\u00FCngliche Klartext-Nachricht und der andere Unsinn ergeben.
RSAAttackView_SETUP_Title=Durchf\u00FChrung des SETUP-Angriffs
RSAAttackView_Title=Die Perspektive des Angreifers
RSAKeyView_Additional_Values=Zus\u00E4tzliche Kryptosystemwerte
RSAKeyView_AttackerE=E des Angreifers
RSAKeyView_AttackerN=N des Angreifers
RSAKeyView_Binary=Bin\u00E4r
RSAKeyView_Bit_Length=Bitl\u00E4nge der Schl\u00FCssel:
RSAKeyView_Bit_Length_Divisibility=Die Bitl\u00E4nge der Schl\u00FCssel muss durch zwei teilbar sein, da die Primzahlen P und Q genau die H\u00E4lfte dieser L\u00E4nge sein m\u00FCssen.
RSAKeyView_Bit_Length_Generic_Error=Es gab einen Fehler bei der Eingabe der Schl\u00FCssell\u00E4nge.
RSAKeyView_Bit_Length_Input_Error_Title=Bitl\u00E4ngeeingabefehler
RSAKeyView_Bit_Length_Minimum=Die Schl\u00FCssell\u00E4nge muss mindestens 8 Bit sein. Kleinere Werte k\u00F6nnen nicht richtig entschl\u00FCsseln, weil die meisten ASCII-Werte gr\u00F6\u00DFer als das Modul N w\u00E4ren.
RSAKeyView_Bit_Length_SETUP_Divisibility=Der SETUP-Angriff erfordert eine Bitl\u00E4nge der Schl\u00FCssel, die teilbar durch 4 ist,\nweil die Primzahlen des Angreifers genau die H\u00E4lfte der L\u00E4nge der Primzahlen des Kryptosystems haben muss,\ndie selbst genau die H\u00E4lfte der L\u00E4nge der Schl\u00FCssellange haben muss.
RSAKeyView_Bit_Length_SETUP_Minimum=Der SETUP-Angriff ben\u00F6tigt eine Schl\u00FCssell\u00E4nge von mindestens 20 Bit.\nKleinere Werte ergeben einen zu kleinen Schl\u00FCsselraum, mit dem der Angreifer effektiven Schl\u00FCssel erzeugen kann.
RSAKeyView_CalcD=D berechnen
RSAKeyView_CalcN=N berechnen
RSAKeyView_Ciphertext=Verschl\u00FCsselte Nachricht (Geheimtext)
RSAKeyView_Cryptosystem_Values=Standard-Kryptosystemwerte
RSAKeyView_D=D (privater Exponent)
RSAKeyView_Decimal=Dezimal
RSAKeyView_Decrypt=Entschl\u00FCsseln
RSAKeyView_Decrypted=Entschl\u00FCsselter Geheimtext (Klartext)
RSAKeyView_E=E (\u00F6ffentlicher Exponent)
RSAKeyView_Encrypt=Verschl\u00FCsseln
RSAKeyView_EncryptedP=Verschl\u00FCsselte P
RSAKeyView_Fixed_Step1=Schritt 1: In diesem Angriff wird das kryptographische Ger\u00E4t kompromittiert, wobei eine der Primzahlen fest gew\u00E4hlt wird. Das erste Mal, dass die Primzahlen in dem Ger\u00E4t erzeugt werden, werden sie nicht manipuliert (zuf\u00E4llig) erzeugt, aber danach wird P festgehalten und nur Q zuf\u00E4llig erzeugt.
RSAKeyView_Fixed_Step2=Schritt 2: P mal Q ergibt das Modul N.
RSAKeyView_Fixed_Step3=Schritt 3: Phi wird berechnet, der \u00F6ffentliche Exponent E wird gew\u00e4hlt, und der private Exponent D wird berechnet, indem die multiplikative Inverse von E bez\u00FCglich Phi gefunden wird. E und N bilden den \u00F6ffentlichen Schl\u00FCssel, und D und N bilden den privaten Schl\u00FCssel.
RSAKeyView_Fixed_Step4=Schritt 4: Geben Sie eine Nachricht unten ein und verschl\u00FCsseln Sie sie mit dem \u00F6ffentlichen Schl\u00FCssel.
RSAKeyView_Fixed_Step5=Schritt 5: Als Angreifer kann man alle \u00F6ffentlich \u00FCbermittelten Schl\u00FCssel und Geheimtexte sehen. Speichern Sie jetzt den aktuellen \u00F6ffentlichen Schl\u00FCssel und Geheimtext.
RSAKeyView_Fixed_Step6=Schritt 6: Um diesen Angriff durchzuf\u00FChren, ben\u00F6tigen Sie einen zweiten \u00F6ffentlichen Schl\u00FCssel. Erzeugen Sie ein neues Schl\u00FCsselpaar. Dabei k\u00F6nnen Sie sehen, dass die Primzahl P sich nicht \u00E4ndert, obwohl die andere Werte sich doch \u00E4ndern.
RSAKeyView_Fixed_Step7=Schritt 7: Geben Sie eine Nachricht ein und verschl\u00FCsseln Sie sie mit dem zweiten \u00F6ffentlichen Schl\u00FCssel.
RSAKeyView_Fixed_Step8=Schritt 8: Speichern Sie den zweiten \u00F6ffentlichen Schl\u00FCssel und Geheimtext, um den Angriff durchf\u00FChren zu k\u00F6nnen.
RSAKeyView_Fixed_Title=Betr\u00FCgerische Schl\u00FCsselerzeugung mit RSA: feste Primzahl P
RSAKeyView_FixedP=Angriff 1: Nutzung eines festen P
RSAKeyView_Gen_Attacker_Keys=Neue Schl\u00FCssel f\u00FCr den Angreifer erzeugen
RSAKeyView_Gen_Desc=Kleptographie ist ein Verfahren, mit dem man Informationen sicher und verdeckt stehlen kann, indem man eine asymmetrische Hintert\u00FCr in ein kryptographisches System einbaut. Beispielsweise kann man in einem RSA-Kryptosystem verschl\u00FCsselte Daten durch einen verdeckten Kanal durchsickern lassen, mit denen man dann den RSA-Modul leicht zerlegen kann. Wenn der Angriff in einem Black-Box-Ger\u00E4t richtig durchgef\u00FChrt wird, ist die Ausgabe nicht von der Ausgabe eines nicht manipulierten Ger\u00E4ts zu unterscheiden. Auch wenn das Ger\u00E4t per Reverse Engineering offengelegt wird, k\u00F6nnte man zwar den Angriff bemerken, aber die durchgesickerten Daten sowie der private Schl\u00FCssel des Angreifers werden nicht aufgedeckt. Diese Beispiel-Implementierung nutzt RSA und enth\u00E4lt vier verschiedene "b\u00F6swillige" Verfahren zur Schl\u00FCsselerzeugung, die ein Angreifer nutzen k\u00F6nnte, um ein Ger\u00E4t zu kompromittieren. Dieses Thema zeigt, wie wichtig die Nutzung von echten zuf\u00E4lligen Schl\u00FCsseln ist.
RSAKeyView_Gen_New_Seed=Neuen Startwert erzeugen
RSAKeyView_Gen_Primes=Primzahlen P und Q erzeugen
RSAKeyView_GenAll=Alles auf einmal erzeugen
RSAKeyView_GenE=Neues E erzeugen
RSAKeyView_Hex=Hexadezimal
RSAKeyView_Honest=Nicht manipulierte (zuf\u00E4llige) Primzahlen erzeugen
RSAKeyView_Honest_Step1=Schritt 1: Zwei zuf\u00E4llige verschiedene Primzahlen (P und Q) werden erzeugt. Diese Primzahlen haben die halbe Bitl\u00E4nge wie die Schl\u00FCssel.
RSAKeyView_Honest_Step2=Schritt 2: P mal Q ergibt das Modul N.
RSAKeyView_Honest_Step3=Schritt 3: W\u00e4hlen Sie einen \u00F6ffentliche Exponent E und dann wird der private Exponent D berechnet. Erstens muss Phi berechnet werden, wobei Phi(P*Q) = (P-1)*(Q-1) nach dem erweiterten euklidischen Algorithmus. E muss teilerfremd zu Phi sein und 1 <= E <= Phi - 1. Der Standardwert ist 2^16+1, aber man kann auch einen eigenen Wert nutzen oder einen zuf\u00E4llig erzeugen lassen. Der private Exponent D wird dann durch Rechnung der multiplikativen Inverse zu E mod Phi berechnet. E und N bilden den \u00F6ffentlichen Schl\u00FCssel, und D und N bilden den privaten Schl\u00FCssel.
RSAKeyView_Honest_Step4=Schritt 4: Geben Sie eine Nachricht unten ein und verschl\u00FCsseln Sie sie mit dem \u00F6ffentlichen Schl\u00FCssel.
RSAKeyView_Honest_Step5=Schritt 5: Der Besitzer des privaten Schl\u00FCssels kann die Nachricht entschl\u00FCsseln, was man hier durch den "Entschl\u00FCsseln"-Knopf simulieren kann. Ein Angreifer kann diese Nachricht nicht entschl\u00FCsseln. Dazu m\u00FCsste er das Modul N in seine Primfaktoren zerlegen, was aufgrund des hohen Rechenaufwands f\u00FCr gro\u00DFe Bitl\u00E4nge (1024 Bits oder mehr) derzeit nicht praktikabel ist.
RSAKeyView_Honest_Title=Nicht manipulierte Schl\u00FCsselerzeugung mit RSA
RSAKeyView_ID=Kryptosystem ID
RSAKeyView_in_decimal=(dezimal)
RSAKeyView_Index=Index
RSAKeyView_Invalid_E=Der Wert, die Sie f\u00FCr E eingegeben haben, ist kein g\u00FCltige Zahl.\nDieser Wert muss in der angemessenen Basis eingegeben werden.
RSAKeyView_Invalid_E_Coprime=E muss teilerfremd zu phi = (p - 1)*(q - 1) =
RSAKeyView_Invalid_E_Coprime2=\ sein.\nDieser Wert muss in der angemessenen Basis eingegeben werden.
RSAKeyView_Invalid_E_Size=E muss gr\u00F6\u00DFer als 1 und kleiner als phi = (p - 1)*(q - 1) =
RSAKeyView_Invalid_E_Size2=\ sein.\nDieser Wert muss in der angemessenen Basis eingegeben werden.
RSAKeyView_Invalid_Equal=P und Q darf nicht gleich sein.
RSAKeyView_Invalid_ID=Der Wert, die Sie f\u00FCr die ID eingegeben haben, ist kein g\u00FCltige Zahl.\nDieser Wert muss in der angemessenen Basis eingegeben werden.
RSAKeyView_Invalid_Input=Ung\u00FClitge Eingabe
RSAKeyView_Invalid_Length=\ Bit lang sein.\nDieser Wert muss in der angemessenen Basis eingegeben werden.
RSAKeyView_Invalid_P=Der Wert, die Sie f\u00FCr P eingegeben haben, ist kein g\u00FCltige Zahl.\nDieser Wert muss in der angemessenen Basis eingegeben werden.
RSAKeyView_Invaild_P_Prime=Die Zahl, die Sie f\u00FCr P eingegeben haben, ist nicht prim.\nDieser Wert muss in der angemessenen Basis eingegeben werden.
RSAKeyView_Invalid_P_Length=Die Zahl, die Sie f\u00FCr P eingegeben haben, muss
RSAKeyView_Invalid_Q=Der Wert, die Sie f\u00FCr Q eingegeben haben, ist kein g\u00FCltige Zahl.\nDieser Wert muss in der angemessenen Basis eingegeben werden.
RSAKeyView_Invalid_Q_Length=Die Zahl, die Sie f\u00FCr Q eingegeben haben, muss
RSAKeyView_Invalid_Q_Prime=Die Zahl, die Sie f\u00FCr Q eingegeben haben, ist nicht prim.\nDieser Wert muss in der angemessenen Basis eingegeben werden.
RSAKeyView_Invaild_Seed=Der eingegebene Startwert ist keine g\u00FCltige Zahl.\nDieser Wert muss in der angemessenen Basis eingegeben werden.
RSAKeyView_Keygen=Schl\u00FCsselerzeugung
RSAKeyView_Method=Verfahren:
RSAKeyView_N=N = P * Q
RSAKeyView_N_Prime=N' (vorl\u00E4ufiges Modul)
RSAKeyView_P=P (Primzahl)
RSAKeyView_Plaintext=Urspr\u00FCngliche Nachricht (Klartext)
RSAKeyView_PRF=Angriff 2: Erzeugung von P durch eine pseudozufallsfunktion
RSAKeyView_PRF_Step1=Schritt 1: In diesem Angriff wird das Kryptosystem kompromittiert, indem eine der Primzahlen durch eine pseudozuf\u00E4llige Funktion erzeugt wird. Diese Funktion bekommt zwei Eingabewerte: eine zu diesem Kryptosystem eindeutige ID und einen Index.
RSAKeyView_PRF_Step2=Schritt 2: \u00DCber die ID und den Index wird ein Hash gebildet, der benutzt wird, um die Primzahl P zu erzeugen. Der Index wird in dem Ablauf der Erzeugung pseudozuf\u00E4lliger Werte mehrmals inkrementiert. Die zweite Primzahl Q wird nicht manipuliert erzeugt.
RSAKeyView_PRF_Step3=Schritt 3: P mal Q ergibt das Modul N.
RSAKeyView_PRF_Step4=Schritt 4: Phi wird berechnet, der \u00F6ffentliche Exponent E wird gew\u00e4hlt, und der private Exponent D wird berechnet, indem die multiplikative Inverse von E bez\u00FCglich Phi gefunden wird. E und N bilden den \u00F6ffentlichen Schl\u00FCssel, und D und N bilden den privaten Schl\u00FCssel.
RSAKeyView_PRF_Step5=Schritt 5: Geben Sie eine Nachricht unten ein und verschl\u00FCsseln Sie diese mit dem \u00F6ffentlichen Schl\u00FCssel.
RSAKeyView_PRF_Step6=Schritt 6: F\u00FCr einen normalen Beobachter sollten die Schl\u00FCssel ausreichend zuf\u00E4llig scheinen. Der Angreifer hat dagegen die ID und die Funktion, kann den Index leicht finden, und kann damit die Primzahl P nachbilden. Mithilfe des \u00F6ffentlichen Schl\u00FCssels kann der Angreifer den privaten Schl\u00FCssel wiederherstellen.
RSAKeyView_PRF_Title=Betr\u00FCgerische Schl\u00FCsselerzeugung mit RSA: Pseudozufallsfunktion
RSAKeyView_PRG=Angriff 3: Erzeugung von P durch einen pseudozufallsgenerator
RSAKeyView_PRG_Step1=Schritt 1: In diesem Angriff wird das Kryptosystem kompromittiert, indem eine der Primzahlen durch einen pseudozufallsgenerator erzeugt wird. Dieser Generator ben\u00F6tigt einen Startwert, mit dem bei jeder Iteration ein neuer Startwert berechnet wird.
RSAKeyView_PRG_Step2=Schritt 2: Jede Iteration des Generators ergibt drei nutzbare Bits. Nach genug Iterationen k\u00F6nnen die gesammelte Bits benutzt werden, um eine prime Pseudozufallszahl P zu erzeugen. Die zweite Primzahl wird nicht manipuliert erzeugt. Achtung: diesem Ablauf k\u00F6nnte f\u00FCr lange Schl\u00FCssel mehrere Sekunden oder sogar Minuten brauchen\!
RSAKeyView_PRG_Step3=Schritt 3: P mal Q ergibt das Modul N.
RSAKeyView_PRG_Step4=Schritt 4: Phi wird berechnet, der \u00F6ffentliche Exponent E wird gew\u00e4hlt, und der private Exponent D wird berechnet, indem die multiplikative Inverse von E bez\u00FCglich Phi gefunden wird. E und N bilden den \u00F6ffentlichen Schl\u00FCssel, und D und N bilden den privaten Schl\u00FCssel.
RSAKeyView_PRG_Step5=Schritt 5: Geben Sie eine Nachricht unten ein und verschl\u00FCsseln Sie sie mit dem \u00F6ffentlichen Schl\u00FCssel.
RSAKeyView_PRG_Step6=Schritt 6: F\u00FCr einen normalen Beobachter sollten die Schl\u00FCssel ausreichend zuf\u00E4llig scheinen. Der Angreifer hat dagegen den urspr\u00FCnglichen Startwert und den Generator, und kann damit die Primzahl P nachbilden. Mithilfe von dem \u00F6ffentlichen Schl\u00FCssel kann der Angreifer den privaten Schl\u00FCssel wiederherstellen.
RSAKeyView_PRG_Title=Betr\u00FCgerische Schl\u00FCsselerzeugung mit RSA: Pseudozufallsgenerator
RSAKeyView_Q=Q (Primzahl)
RSAKeyView_ResetE=Standard E wiederherstellen
RSAKeyView_Reset_ID_Index=ID und Index zur\u00FCcksetzen
RSAKeyView_Save=\u00d6ffentlichen Schl\u00FCssel und Geheimtext speichern
RSAKeyView_Seed=Zuf\u00E4lliger Startwert
RSAKeyView_Settings=Einstellungen
RSAKeyView_SETUP=Angriff 4: SETUP
RSAKeyView_SETUP_Step1=Schritt 1: Ein SETUP-Angriff (engl. "secretly embedded trapdoor with universal protection", d.h. ein geheim eingebauter, universal gesch\u00FCtzter Fallt\u00FCrangriff) wird konstruiert, um verschl\u00FCsselte Daten aus einem Kryptosystem offenzulegen. In diesem Beispiel wird es angenommen, dass der Angreifer dieses Ger\u00E4t kompromittiert hat, indem es seinen \u00F6ffentlichen Schl\u00FCssel beinhaltet.
RSAKeyView_SETUP_Step2=Schritt 2: Die Primzahl P wird zuf\u00E4llig erzeugt und dann mit dem \u00F6ffentlichen Schl\u00FCssel des Angreifers verschl\u00FCsselt. Ein vorl\u00E4ufiges Modul N' wird konstruiert, damit die obere H\u00E4lfte der Bits gleich dem verschl\u00FCsselten P und der Rest zuf\u00E4llig ist. Die zweite Primzahl wird durch Division mittels der Gleichung P*Q + R = N' gerechnet, wo R der unbenutzte Rest ist. Achtung: dieser Ablauf k\u00F6nnte f\u00FCr lange Schl\u00FCsselgr\u00F6\u00DFen mehrere Sekunden oder sogar Minuten brauchen\!
RSAKeyView_SETUP_Step3=Schritt 3: P mal Q ergibt das eigentliche Modul N, was auch gleich N' - R ist. Beachten Sie, dass die obere Bith\u00E4lfte von N gleich der oberen Bilth\u00E4lfte von N' ist - Ausnahme: bei gro\u00DFen R k\u00F6nnen diese Bits sich um eins unterscheiden. Der Angreifer muss das sp\u00E4ter ber\u00FCcksichtigen.
RSAKeyView_SETUP_Step4=Schritt 4: Phi wird berechnet, der \u00F6ffentliche Exponent E wird gew\u00e4hlt, und der private Exponent D wird berechnet, indem die multiplikative Inverse von E bez\u00FCglich Phi gefunden wird. E und N bilden den \u00F6ffentlichen Schl\u00FCssel, und D und N bilden den privaten Schl\u00FCssel.
RSAKeyView_SETUP_Step5=Schritt 5: Geben Sie eine Nachricht unten ein und verschl\u00FCsseln Sie sie mit dem \u00F6ffentlichen Schl\u00FCssel.
RSAKeyView_SETUP_Step6=Schritt 6: F\u00FCr einen normalen Beobachter sollten die Schl\u00FCssel ausreichend zuf\u00E4llig scheinen. Der Angreifer wei\u00DF dagegen, dass der private Schl\u00FCssel tats\u00E4chlich in dem \u00F6ffentlichen Schl\u00FCssel gespeichert wurde. Speichern Sie nun den \u00F6ffentlichen Schl\u00FCssel und den Geheimtext, um sie in dem n\u00E4chsten Tab weiter zu analysieren.
RSAKeyView_SETUP_Title=Betr\u00FCgerische Schl\u00FCsselerzeugung mit RSA: SETUP-Angriff
RSAKeyView_Texts=Klar- und Geheimtexte
RSAKeyView_Title=Kleptographische Angriffe mit RSA
