KleptoView_Keygen=Key generation and encryption
KleptoView_FixedP=Attacking fixed P
KleptoView_SETUP=SETUP attack
OverwriteDialog_Already_Saved_Two=You have already saved two public keys and ciphertexts.\nChoose one to overwrite, or cancel.
OverwriteDialog_Cancel=Cancel
OverwriteDialog_First_Set=First Set
OverwriteDialog_Overwrite_Saved_Data=Overwrite Saved Data
OverwriteDialog_Second_Set=Second Set
RSAAttackView_Fixed_Back=Back to Key Generation and Encryption
RSAAttackView_Fixed_Calc_Private=Calculate private keys
RSAAttackView_Fixed_Calculations=Calculations
RSAAttackView_Fixed_Calculations_Desc=These values can be easily calculated by an attacker or any other party that recognizes that the composites share a factor. The prime P will be shared by both keys, but Q and D will not be.
RSAAttackView_Fixed_Ciphertext1=First ciphertext
RSAAttackView_Fixed_Ciphertext2=Second ciphertext
RSAAttackView_Fixed_Ciphertexts=Ciphertexts
RSAAttackView_Fixed_Ciphertexts_Desc=Ciphertexts are transmitted publicly, so they are entirely visible to an attacker or any other party monitoring the communication channel.
RSAAttackView_Fixed_D1=D (private exponent) of first key
RSAAttackView_Fixed_D2=D (private exponent) of second key
RSAAttackView_Fixed_Decrypt_Cipher=Decrypt ciphertexts
RSAAttackView_Fixed_Decrypted=Decrypted texts
RSAAttackView_Fixed_Decrypted_Desc=The plaintexts can be recovered by an attacker after decrypting the ciphertexts with the private keys recalculated by the attacker.
RSAAttackView_Fixed_Decrypted1=First decrypted text
RSAAttackView_Fixed_Decrypted2=Second decrypted text
RSAAttackView_Fixed_E1=E (public exponent) of first key
RSAAttackView_Fixed_E2=E (public exponent) of second key
RSAAttackView_Fixed_FactoredP=Factored prime P
RSAAttackView_Fixed_Find_GCD=Find GCD of the composites
RSAAttackView_Fixed_N1=N (composite) of first key
RSAAttackView_Fixed_N2=N (composite) of second key
RSAAttackView_Fixed_Public_Desc=Public keys are by definition publicly accessible and thus visible to an attacker. These keys were copied directly from the first tab. The attacker must examine two different keys to complete the attack.
RSAAttackView_Fixed_Public_Keys=Public keys
RSAAttackView_Fixed_Q1=Q (prime) of first key
RSAAttackView_Fixed_Q2=Q (prime) of second key
RSAAttackView_Fixed_Step9=Step 9: Calculate the greatest common denominator of the two saved composites. Since one of the primes used to generate both was held constant, that value should reappear as the GCD.
RSAAttackView_Fixed_Step10=Step 10: Now that you know the prime P, you can find the values of both Qs simply by dividing both Ns by P. With both prime pairs corresponding to each N, you can calculate the private exponent Ds just as the device did.
RSAAttackView_Fixed_Step11=Step 11: You can now decrypt the ciphertexts with the appropriate recalculated private exponents without ever having been directly given the private keys.
RSAAttackView_Fixed_Title=Taking advantage of a fixed P
RSAAttackView_Gen_Desc=The goal of an attacker is to use publicly available information, i.e. the public keys and ciphertexts, to obtain the information that he or she needs to factor the key composite N and thus recalculate the private exponent D.
RSAAttackView_Identical_N_Text=The saved composite N values are identical and thus cannot be factored.\nPlease save a different public key and ciphertext.
RSAAttackView_Identical_N_Title=Identical Composite N
RSAAttackView_SETUP_Additional_Data=Additional data
RSAAttackView_SETUP_Additional_Desc=The encrypted P is read from the upper bits of the public key composite N, and to decrypt it the attacker will need his or her own private key.
RSAAttackView_SETUP_AttackersD=Attacker's D (private exponent)
RSAAttackView_SETUP_Back=Back to Key Generation and Encryption
RSAAttackView_SETUP_Calc_Private=Calculate private keys
RSAAttackView_SETUP_Calculations=Calculations
RSAAttackView_SETUP_Calculations_Desc=The attacker will find the prime P encrypted with his or her public key stored in the upper bits of the composite N. Because of a potential carry bit in division in the prime generation algorithm, the attacker must also calculate P' by adding one to the encrypted P before decrypting. The attacker can use P to find Q and then D but must also use P' to find Q' and D'.
RSAAttackView_SETUP_Ciphertext_Desc=The ciphertext is transmitted publicly, so it is entirely visible to an attacker or any other party monitoring the communication channel.
RSAAttackView_SETUP_Ciphertext_Group=Ciphertext
RSAAttackView_SETUP_D1=D (private exponent)
RSAAttackView_SETUP_D2=D' (private exponent)
RSAAttackView_SETUP_Decrypt_Cipher=Decrypt ciphertexts
RSAAttackView_SETUP_Decrypted1=Ciphertext decrypted with D
RSAAttackView_SETUP_Decrypted2=Ciphertext decrypted with D'
RSAAttackView_SETUP_Decryption_Desc=The attacker can obtain the plaintext by decrypting with the a recalculated private key, but he or she will not know whether D or D' is the correct private exponent and thus must use both.
RSAAttackView_SETUP_Decryptions=Decrypted texts
RSAAttackView_SETUP_DecryptP=Decrypt encrypted P
RSAAttackView_SETUP_E=E (public exponent)
RSAAttackView_SETUP_EncryptedP=Encrypted P
RSAAttackView_SETUP_N=N (composite)
RSAAttackView_SETUP_P1=Decrypted P
RSAAttackView_SETUP_P2=Decrypted P' (P + 1)
RSAAttackView_SETUP_Public_Desc=The public key is by definition publicly accessible and thus visible to an attacker. This key was copied directly from the first tab.
RSAAttackView_SETUP_Public_Keys=Public key
RSAAttackView_SETUP_Q1=Q = N / decrypted P
RSAAttackView_SETUP_Q2=Q' = N / decrypted P'
RSAAttackView_SETUP_Step7=Step 7: Extract the encrypted prime P from the upper bits of the composite N. Decrypting this value with the attacker's private key yields the prime P, unless a borrow bit was taken in the earlier division. Since the attacker can't know if this occurred, he or she must decrypt both the encrypted P and that value plus one.
RSAAttackView_SETUP_Step8=Step 8: Using P and P' along with the public key allows the attacker to reproduce the second prime Q and then the private key. The attacker must calculate Q and Q', although only one of them will be prime and divide N evenly.
RSAAttackView_SETUP_Step9=Step 9: You now have two possible keys to decrypt the ciphertext with. An attacker should already know which is correct, but one will always reproduce the original plaintext message and the other nonsense.
RSAAttackView_SETUP_Title=Carrying out a SETUP attack
RSAAttackView_Title=The attacker's perspective
RSAKeyView_Additional_Values=Additional cryptosystem values
RSAKeyView_AttackerE=Attacker's E
RSAKeyView_AttackerN=Attacker's N
RSAKeyView_Binary=Binary
RSAKeyView_Bit_Length=Key bit length:
RSAKeyView_Bit_Length_Divisibility=The key bit length must be divisible by 2.\nThis is because the primes P and Q must be exactly half as long as the key length.
RSAKeyView_Bit_Length_Generic_Error=There was an error in the key bit length input.
RSAKeyView_Bit_Length_Input_Error_Title=Bit length input error
RSAKeyView_Bit_Length_Minimum=The key length must be at least 8 bits.\nSmaller values can not encrypt text properly since most\nASCII values will be greater than the composite N.
RSAKeyView_Bit_Length_SETUP_Divisibility=The SETUP attack requires that the key bit length is divisible by 4.\nThis is because the attacker's primes must be exactly half as long as the cryptosystem's primes,\nwhich must be exactly half as long as the key length.
RSAKeyView_Bit_Length_SETUP_Minimum=The SETUP attack requires a key length of at least 20 bits.\nSmaller values do not allow enough space for the attacker to create effective keys.
RSAKeyView_CalcD=Calculate D
RSAKeyView_CalcN=Calculate N
RSAKeyView_Ciphertext=Encrypted message (ciphertext)
RSAKeyView_Cryptosystem_Values=Standard cryptosystem values
RSAKeyView_D=D (private exponent)
RSAKeyView_Decimal=Decimal
RSAKeyView_Decrypt=Decrypt
RSAKeyView_Decrypted=Decrypted ciphertext (plaintext)
RSAKeyView_E=E (public exponent)
RSAKeyView_Encrypt=Encrypt
RSAKeyView_EncryptedP=Encrypted P
RSAKeyView_Fixed_Step1=Step 1: In this attack, the cryptographic device is compromised such that one of the primes is kept constant. The first time the primes are generated in the device, they are both generated randomly, but thereafter, P will remain constant and only Q will be newly generated honestly (i.e., randomly).
RSAKeyView_Fixed_Step2=Step 2: Multiply P and Q together to calculate the composite N.
RSAKeyView_Fixed_Step3=Step 3: Calculate Phi, select the public exponent E, and calculate the private exponent D by finding the modular inverse of E mod Phi. E and N together form the public key, and D and N form the private key.
RSAKeyView_Fixed_Step4=Step 4: Enter a message below and encrypt it with the public key.
RSAKeyView_Fixed_Step5=Step 5: As the attacker, you can see all publicly transmitted keys and ciphertexts. For now, you should save the current public key and ciphertext.
RSAKeyView_Fixed_Step6=Step 6: To complete this attack, you will need a second public key. Create a new key pair, and note that the prime P will not change, although the other values will.
RSAKeyView_Fixed_Step7=Step 7: Enter a new message below and encrypt it with the second public key.
RSAKeyView_Fixed_Step8=Step 8: Save the second public key and ciphertext. You will then be able to carry out the attack.
RSAKeyView_Fixed_Title=Dishonest key generation in RSA: fixed prime P
RSAKeyView_FixedP=Attack 1: Use fixed P
RSAKeyView_Gen_Attacker_Keys=Generate new attacker keys
RSAKeyView_Gen_Desc=Kleptography is the technique of stealing information securely and subliminally by introducing an asymmetric backdoor in a cryptographic system. This can be accomplished in an RSA cryptosystem by using a subliminal channel to leak encrypted data that will allow an attacker to easily factor a given RSA modulus. When executed correctly in a black-box device, the encrypted output will appear perfectly normal and even a successful reverse-engineering of the system will not reveal the leaked data. It may reveal the presence of the attack, but the private key of the attacker will not be revealed. This implementation uses RSA and includes four different malicious methods of generating keys that an attacker could use to compromise a device. This topic shows how important it is to use truly randomly generated keys.
RSAKeyView_Gen_New_Seed=Generate new seed
RSAKeyView_Gen_Primes=Generate primes P and Q
RSAKeyView_GenAll=Generate all at once
RSAKeyView_GenE=Generate random E
RSAKeyView_Hex=Hexadecimal
RSAKeyView_Honest=Generate honest (random) primes
RSAKeyView_Honest_Step1=Step 1: Generate two prime random numbers (called P and Q) of the specified bit length divided by two. They must not be equal and must multiply together to form a composite number of the specified bit length.
RSAKeyView_Honest_Step2=Step 2: Multiply P and Q together to calculate the composite number N.
RSAKeyView_Honest_Step3=Step 3: Select a public exponent E and then generate the private exponent D. First, the value Phi must be calculated by applying the extended Euclidean algorithm to P and Q. Since they are primes, Phi(P*Q) = (P-1)*(Q-1). E is then selected from the set of numbers from 1 to Phi - 1 but must be coprime to Phi. The standard value for E is 2^16+1, but you may enter your own value or generate one randomly. Then calculate the private exponent D by finding the modular inverse of E mod Phi. E and N together form the public key, and D and N form the private key.
RSAKeyView_Honest_Step4=Step 4: Enter a message below and encrypt it with the public key.
RSAKeyView_Honest_Step5=Step 5: The holder of the private key can decrypt the message, which you can do by pressing the Decrypt button. An attacker will not be able to decrypt the message unless he or she can somehow factor the composite N, which is computationally hard for the large bit lengths (1024 bits or more) used in practical applications.
RSAKeyView_Honest_Title=Honest key generation in RSA
RSAKeyView_ID=Cryptosystem ID
RSAKeyView_in_decimal=(in decimal)
RSAKeyView_Index=Index
RSAKeyView_Invalid_E=The value you entered for E is not a valid number.\nMake sure you have entered the number in the appropriate radix.
RSAKeyView_Invalid_E_Coprime=E must be relatively prime to phi = (p - 1)*(q - 1) = 
RSAKeyView_Invalid_E_Coprime2=.\nMake sure you have entered the number in the appropriate radix.
RSAKeyView_Invalid_E_Size=E must be greater than 1 and less than phi = (p - 1)*(q - 1) = 
RSAKeyView_Invalid_E_Size2=.\nMake sure you have entered the number in the appropriate radix.
RSAKeyView_Invalid_Equal=P and Q must not be equal.
RSAKeyView_Invalid_ID=The value you entered for the ID is not a valid number.\nMake sure you have entered the number in the appropriate radix.
RSAKeyView_Invalid_Input=Invalid Input
RSAKeyView_Invalid_Length=\ bits long.\nMake sure you have entered the number in the appropriate radix.
RSAKeyView_Invalid_P=The value you entered for P is not a valid number.\nMake sure you have entered the number in the appropriate radix.
RSAKeyView_Invalid_P_Length=The number you have entered for P must be 
RSAKeyView_Invaild_P_Prime=The number you have entered for P is not prime.\nMake sure you have entered the number in the appropriate radix.
RSAKeyView_Invalid_Q=The value you entered for Q is not a valid number.\nMake sure you have entered the number in the appropriate radix.
RSAKeyView_Invalid_Q_Length=The number you have entered for Q must be 
RSAKeyView_Invalid_Q_Prime=The number you have entered for Q is not prime.\nMake sure you have entered the number in the appropriate radix.
RSAKeyView_Invaild_Seed=The value you entered for the seed is not a valid number.\nMake sure you have entered the number in the appropriate radix.
RSAKeyView_Keygen=Key generation
RSAKeyView_Method=Method:
RSAKeyView_N=N = P * Q
RSAKeyView_N_Prime=N' (temporary composite)
RSAKeyView_P=P (prime)
RSAKeyView_Plaintext=Original message (plaintext)
RSAKeyView_PRF=Attack 2: Generate P via pseudo-random function
RSAKeyView_PRF_Step1=Step 1: In this attack, the cryptographic device is compromised such that one of the primes is generated by using a pseudo-random function. This function takes as input two values: an ID unique to the cryptosystem and an index.
RSAKeyView_PRF_Step2=Step 2: The ID and index will be cryptographically hashed together to generate the prime P. The index is incremented multiple times in this process while obtaining pseudo-random values. The second prime Q is then generated honestly.
RSAKeyView_PRF_Step3=Step 3: Multiply P and Q together to calculate the composite N.
RSAKeyView_PRF_Step4=Step 4: Calculate Phi, select the public exponent E, and calculate the private exponent D by finding the modular inverse of E mod Phi. E and N together form the public key, and D and N form the private key.
RSAKeyView_PRF_Step5=Step 5: Enter a message below and encrypt it with the public key.
RSAKeyView_PRF_Step6=Step 6: To a normal observer, the keys should appear sufficiently random. The attacker, however, has the ID and the function. The index can be easily reproduced and thus the attacker can replicate the prime P. With the help of the public key, the attacker can then recreate the private key.
RSAKeyView_PRF_Title=Dishonest key generation in RSA: pseudo-random function
RSAKeyView_PRG=Attack 3: Generate P via pseudo-random generator
RSAKeyView_PRG_Step1=Step 1: In this attack, the cryptographic device is compromised such that one of the primes is generated by using a pseudo-random bit generator. This generator requires an initial seed, but each iteration also generates a new seed, which overwrites the previous one.
RSAKeyView_PRG_Step2=Step 2: Each iteration of the generator produces three usable bits. After enough iterations, the collected bits can be used to create a pseudo-random prime P. The second prime Q is generated honestly. Warning: this may take several seconds or even minutes for large key sizes\!
RSAKeyView_PRG_Step3=Step 3: Multiply P and Q together to calculate the composite N.
RSAKeyView_PRG_Step4=Step 4: Calculate Phi, select the public exponent E, and calculate the private exponent D by finding the modular inverse of E mod Phi. E and N together form the public key, and D and N form the private key.
RSAKeyView_PRG_Step5=Step 5: Enter a message below and encrypt it with the public key.
RSAKeyView_PRG_Step6=Step 6: To a normal observer, the values keys should appear sufficiently random. The attacker, however, has copies of the initial seed and the generator. The attacker can use these to replicate the prime P. With the help of the public key, the attacker can then recreate the private key.
RSAKeyView_PRG_Title=Dishonest key generation in RSA: pseudo-random generator
RSAKeyView_Q=Q (prime)
RSAKeyView_Reset_ID_Index=Reset ID and index
RSAKeyView_ResetE=Restore default E
RSAKeyView_Save=Save public key and ciphertext
RSAKeyView_Seed=Random seed
RSAKeyView_Settings=Settings
RSAKeyView_SETUP=Attack 4: SETUP
RSAKeyView_SETUP_Step1=Step 1: A SETUP (secretly embedded trapdoor with universal protection) attack is designed to leak encrypted data out of a cryptographic device. In this example, it is assumed that the attacker has compromised the device to contain his or her own public key.
RSAKeyView_SETUP_Step2=Step 2: The prime P will be generated randomly. It will then be encrypted with the attacker's public key. A temporary composite N' will be designed so that the upper half of the bits are equal to the encrypted P, and the rest is random. The second prime Q is calculated by division from the equation P*Q + R = N', where R is an unused remainder. Warning: this may take several seconds or even minutes for large key sizes\!
RSAKeyView_SETUP_Step3=Step 3: Multiply P and Q together to calculate the actual composite N. N is also equal to N' - R. Note that if R is large enough, the upper half of the bits in N may be equal to one less than those in N'. The attacker will later have to take this into account.
RSAKeyView_SETUP_Step4=Step 4: Calculate Phi, select the public exponent E, and calculate the private exponent D by finding the modular inverse of E mod Phi. E and N together form the public key, and D and N form the private key.
RSAKeyView_SETUP_Step5=Step 5: Enter a message below and encrypt it with the public key.
RSAKeyView_SETUP_Step6=Step 6: To a normal observer, the values keys should appear sufficiently random. The attacker, however, knows that the private key is essentially stored inside the public key. Save the public key and ciphertext to analyze them further in the next tab.
RSAKeyView_SETUP_Title=Dishonest key generation in RSA: SETUP attack
RSAKeyView_Texts=Plain- and ciphertexts
RSAKeyView_Title=Kleptographic attacks on RSA
